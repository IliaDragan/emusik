<?php
/**
 * @file
 * Perform install and uninstall routines.
 */

/**
 * Implements hook_install().
 *
 * Create basic taxonomy vocabularies and related terms.
 */
function emusik_taxonomy_install() {
  $structure = array(
    array(
      'name' => 'Article Type',
      'description' => '',
      'terms' => array(
        'Recommendations',
        'Playlists',
        'News',
        'Feature Article',
      ),
    ),
    array(
      'name' => 'Material Type',
      'description' => '',
      'terms' => array(
        'Event',
        'Concert',
        'CD',
        'Live CD',
        'DVD',
        'Live DVD',
      ),
    ),
    array(
      'name' => 'Supplier',
      'description' => '',
      'terms' => array(
        'Bibliotek',
        'External Blog',
        'Artist',
      ),
    ),
    // Category exists by default
    /*array(
      'name' => 'Category',
      'description' => '',
      'terms' => array(),
    ),*/
    array(
      'name' => 'Artist/album/track',
      'description' => '',
      'terms' => array(),
    ),
  );

  if (is_array($structure)) {
    foreach ($structure as $entry) {
      $voc = _emusik_taxonomy_create_vocabulary($entry);

      // Make a decision of how the parameters should be passed,
      // in case of existing vocabulary (object) and
      // in case of newly created vocabulary (status message).
      if (is_object($voc)) {
        _emusic_taxonomy_create_terms($voc, $entry['terms']);
      }
      elseif ($voc === SAVED_NEW) {
        // When a vocabulary is created, the respective function
        // returns only a status constant, so we need a machine name
        // to create terms for this vocabulary.
        $machine_name = _emusic_taxonomy_vocabulary_create_machine_name($entry['name']);
        _emusic_taxonomy_create_terms($machine_name, $entry['terms']);
      }
    }
  }
}

/**
 * Creates vocabularies.
 *
 * This function creates only unique vocabularies, existing entries
 * are ignored.
 *
 * @param $entry
 *   An array with basic vocabulary information.
 * @see emusik_taxonomy_install().
 *
 * @return
 *   A status constaint (SAVED_NEW), a vocabulary objects if it exists,
 *   or FALSE on failure.
 */
function _emusik_taxonomy_create_vocabulary($entry) {
  if (is_array($entry)) {
    $new_voc = new stdClass();
    $new_voc->name = $entry['name'];
    $new_voc->machine_name = _emusic_taxonomy_vocabulary_create_machine_name($entry['name']);
    $new_voc->description = $entry['description'];

    if (!empty($new_voc->machine_name)) {
      $existing_voc = taxonomy_vocabulary_machine_name_load($new_voc->machine_name);
      if ($existing_voc === FALSE) {
        return taxonomy_vocabulary_save($new_voc);
      }
      else {
        return $existing_voc;
      }
    }
  }

  return FALSE;
}

/**
 * Create terms for a certain vocabulary.
 *
 * @param $voc
 *   A vocabulary object, or vocabulary machine name.
 * @see _emusik_taxonomy_create_vocabulary().
 *
 * @param $terms
 *   An array of terms to be inserted.
 */
function _emusic_taxonomy_create_terms($voc, $terms) {
  $target_vocabulary = NULL;
  if (is_string($voc) && !empty($voc)) {
    $target_vocabulary = taxonomy_vocabulary_machine_name_load($voc);
  }
  elseif (is_object($voc) && isset($voc->vid)) {
    $target_vocabulary = $voc;
  }

  // There are terms to be inserted, and the target vocabulary exists.
  if (is_array($terms) && isset($target_vocabulary->vid)) {
    foreach ($terms as $term) {
      $existing = taxonomy_get_term_by_name($term, $target_vocabulary->machine_name);

      if (count($existing) == 0) {
        $new_term = new stdClass();
        $new_term->vid = $target_vocabulary->vid;
        $new_term->name = $term;
        taxonomy_term_save($new_term);
      }
    }
  }
}

/**
 * Generate a taxonomy-specific vocabulary machine name.
 *
 * According to taxonomy module requirements, vocabularies machine names
 * can only contain numbers, symbols in lower-case and underscores.
 *
 * @param $name
 *   Vocabulary name, which is to be used to create a machine name.
 * @return string
 *   Machine name with certain prefix, or empty string on failure.
 */
function _emusic_taxonomy_vocabulary_create_machine_name($name) {
  if (!empty($name)) {
    return 'emusik_tx_' . preg_replace('/[^a-zA-Z0-9_]/', '_', strtolower($name));
  }

  return '';
}


/**
 * Rename taxonomy vocabulary 'artist album track' to 'Artist'.
 */
function emusik_taxonomy_update_7002() { 
  $v = taxonomy_vocabulary_machine_name_load('emusik_tx_artist_album_track');
  $v->name = 'Artist';
  taxonomy_vocabulary_save($v); 
  drupal_flush_all_caches();
}

/**
 * Update Material type taxonomy.
 */
function emusik_taxonomy_update_7003() {
  $v = taxonomy_vocabulary_machine_name_load('emusik_tx_material_type');
  // Rename vacobulary.
  $v->name = 'Genre';
  taxonomy_vocabulary_save($v);

  // remove all existing terms.
  $tree = taxonomy_get_tree($v->vid);
  foreach ($tree as $t) {
    taxonomy_term_delete($t->tid);
  }
  // Create new terms.
  $terms = array(
    'Klassisk',
    'Pop/Rock',
    'World',
    'Jazz',
    'Elektronisk',
  );
  _emusic_taxonomy_create_terms($v->machine_name, $terms);
  drupal_flush_all_caches();
}

/**
 * Create Area taxonomy.
 */
function emusik_taxonomy_update_7004() {
  $area = array(
    'name' => 'Area',
    'description' => '',
    'terms' => array(
      'Nordjylland',
      'Sydjylland',
      'Midtjylland',
      'Fyn',
      'Sjælland',
      'Øerne',
    ),
  );

  $voc = _emusik_taxonomy_create_vocabulary($area);

  if (is_object($voc)) {
    _emusic_taxonomy_create_terms($voc, $area['terms']);
  }
  elseif ($voc === SAVED_NEW) {
    $machine_name = _emusic_taxonomy_vocabulary_create_machine_name($area['name']);
    _emusic_taxonomy_create_terms($machine_name, $area['terms']);
  }
  drupal_flush_all_caches();
}
